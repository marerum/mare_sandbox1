import os
from supabase import create_client, Client
from dotenv import load_dotenv

# 環境変数を読み込み
load_dotenv()

def create_tables_with_supabase_sdk():
    """
    Supabase Python SDKを使用してテーブルを作成する
    """
    
    # Supabaseクライアントを初期化
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
    
    if not supabase_url or not supabase_anon_key:
        print("❌ エラー: .envファイルにSUPABASE_URLとSUPABASE_ANON_KEYが設定されていません")
        return False
    
    try:
        # Supabaseクライアント作成
        supabase: Client = create_client(supabase_url, supabase_anon_key)
        print("🔌 Supabaseに接続しました")
        
        # SQL文を実行するためのRPC関数呼び出し
        # 注意: これにはSupabase上でSQL実行権限が必要です
        
        # 1. User Base Tableの作成
        create_users_sql = """
        CREATE TABLE IF NOT EXISTS users (
            user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            mail_address TEXT UNIQUE NOT NULL,
            user_name TEXT,
            location TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        """
        
        # 2. User_OperationsDBテーブルの作成
        create_operations_sql = """
        CREATE TABLE IF NOT EXISTS user_operations (
            id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            user_id UUID REFERENCES users(user_id),
            code_number TEXT,
            item_name TEXT,
            character_img_url TEXT,
            character_name TEXT,
            character_parameter JSONB,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        """
        
        # インデックス作成
        create_indexes_sql = """
        CREATE INDEX IF NOT EXISTS idx_users_mail ON users(mail_address);
        CREATE INDEX IF NOT EXISTS idx_operations_user_id ON user_operations(user_id);
        CREATE INDEX IF NOT EXISTS idx_operations_code ON user_operations(code_number);
        CREATE INDEX IF NOT EXISTS idx_operations_created_at ON user_operations(created_at);
        """
        
        # RLS有効化
        enable_rls_sql = """
        ALTER TABLE users ENABLE ROW LEVEL SECURITY;
        ALTER TABLE user_operations ENABLE ROW LEVEL SECURITY;
        """
        
        # 全てのSQL文を結合
        full_sql = f"""
        {create_users_sql}
        {create_operations_sql}
        {create_indexes_sql}
        {enable_rls_sql}
        """
        
        # SQL実行（RPCまたはpostgrest経由）
        try:
            # まずはテーブル存在確認
            users_check = supabase.table('users').select('*').limit(1).execute()
            print("✅ usersテーブルにアクセスできました（既に存在する可能性があります）")
        except Exception as e:
            print(f"ℹ️  usersテーブル確認: {str(e)}")
            print("   → テーブルが存在しない可能性があります。SQL Editorでの作成が必要です。")
        
        try:
            operations_check = supabase.table('user_operations').select('*').limit(1).execute()
            print("✅ user_operationsテーブルにアクセスできました（既に存在する可能性があります）")
        except Exception as e:
            print(f"ℹ️  user_operationsテーブル確認: {str(e)}")
            print("   → テーブルが存在しない可能性があります。SQL Editorでの作成が必要です。")
        
        print("\n📋 テーブル作成SQL文:")
        print("=" * 60)
        print(full_sql)
        print("=" * 60)
        print("\n💡 手動でのテーブル作成手順:")
        print("1. Supabaseダッシュボード > SQL Editor を開く")
        print("2. 上記のSQL文をコピーして実行")
        print("3. 実行後、このスクリプトを再実行してテーブル確認")
        
        return True
        
    except Exception as e:
        print(f"❌ エラー: {e}")
        return False

def verify_tables_with_sdk():
    """
    Supabase SDKを使用してテーブル確認
    """
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
    
    try:
        supabase: Client = create_client(supabase_url, supabase_anon_key)
        
        print("\n🔍 テーブル確認を実行中...")
        
        # テーブルアクセステスト
        tables_status = {}
        
        # usersテーブル確認
        try:
            result = supabase.table('users').select('user_id').limit(1).execute()
            tables_status['users'] = "✅ 存在"
            print(f"✅ usersテーブル: アクセス可能")
        except Exception as e:
            tables_status['users'] = f"❌ エラー: {str(e)}"
            print(f"❌ usersテーブル: {str(e)}")
        
        # user_operationsテーブル確認
        try:
            result = supabase.table('user_operations').select('id').limit(1).execute()
            tables_status['user_operations'] = "✅ 存在"
            print(f"✅ user_operationsテーブル: アクセス可能")
        except Exception as e:
            tables_status['user_operations'] = f"❌ エラー: {str(e)}"
            print(f"❌ user_operationsテーブル: {str(e)}")
        
        return tables_status
        
    except Exception as e:
        print(f"❌ 確認エラー: {e}")
        return {}

if __name__ == "__main__":
    print("🚀 Supabase テーブル作成スクリプト（SDK版）を開始します")
    print("=" * 50)
    
    success = create_tables_with_supabase_sdk()
    
    if success:
        tables_status = verify_tables_with_sdk()
        
        if all("✅" in status for status in tables_status.values()):
            print("\n🎉 全てのテーブルが正常に作成・確認されました！")
        else:
            print("\n⚠️  一部のテーブルで問題があります。上記のSQL文を手動で実行してください。")
    else:
        print("\n❌ 処理に失敗しました。")