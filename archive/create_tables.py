import os
import psycopg2
from dotenv import load_dotenv

# 環境変数を読み込み
load_dotenv()

def create_tables():
    """
    SupabaseにUser Base TableとUser_OperationsDBテーブルを作成する
    """
    
    # Supabaseの接続情報を取得
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_anon_key = os.getenv("SUPABASE_ANON_KEY")
    
    if not supabase_url or not supabase_anon_key:
        print("❌ エラー: .envファイルにSUPABASE_URLとSUPABASE_ANON_KEYが設定されていません")
        return False
    
    # PostgreSQL接続用のURLを構築
    # SupabaseのURLからホスト名を抽出
    host = supabase_url.replace("https://", "").replace("http://", "")
    
    # データベース接続文字列（Supabaseの場合）
    # 注意: 実際の接続にはDB用のパスワードが必要です
    db_password = os.getenv("SUPABASE_DB_PASSWORD")  # .envに追加が必要
    
    if not db_password:
        print("❌ エラー: .envファイルにSUPABASE_DB_PASSWORDを追加してください")
        print("   Supabaseダッシュボード > Settings > Database > Connection stringから取得できます")
        return False
    
    try:
        # PostgreSQL接続
        conn = psycopg2.connect(
            host=host,
            database="postgres",
            user="postgres",
            password=db_password,
            port="5432"
        )
        
        cursor = conn.cursor()
        
        print("🔌 Supabaseデータベースに接続しました")
        
        # 1. User Base Tableの作成
        create_users_table = """
        CREATE TABLE IF NOT EXISTS users (
            user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            mail_address TEXT UNIQUE NOT NULL,
            user_name TEXT,
            location TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        """
        
        cursor.execute(create_users_table)
        print("✅ usersテーブルを作成しました")
        
        # 2. User_OperationsDBテーブルの作成
        create_operations_table = """
        CREATE TABLE IF NOT EXISTS user_operations (
            id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            user_id UUID REFERENCES users(user_id),
            code_number TEXT,
            item_name TEXT,
            character_img_url TEXT,
            character_name TEXT,
            character_parameter JSONB,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        """
        
        cursor.execute(create_operations_table)
        print("✅ user_operationsテーブルを作成しました")
        
        # インデックスを追加（検索性能向上）
        create_indexes = [
            "CREATE INDEX IF NOT EXISTS idx_users_mail ON users(mail_address);",
            "CREATE INDEX IF NOT EXISTS idx_operations_user_id ON user_operations(user_id);",
            "CREATE INDEX IF NOT EXISTS idx_operations_code ON user_operations(code_number);",
            "CREATE INDEX IF NOT EXISTS idx_operations_created_at ON user_operations(created_at);"
        ]
        
        for index_sql in create_indexes:
            cursor.execute(index_sql)
        
        print("✅ インデックスを作成しました")
        
        # Row Level Security (RLS) を有効化
        rls_commands = [
            "ALTER TABLE users ENABLE ROW LEVEL SECURITY;",
            "ALTER TABLE user_operations ENABLE ROW LEVEL SECURITY;"
        ]
        
        for rls_sql in rls_commands:
            cursor.execute(rls_sql)
        
        print("✅ Row Level Security (RLS) を有効化しました")
        
        # 変更をコミット
        conn.commit()
        
        print("\n🎉 全てのテーブルが正常に作成されました！")
        
        # テーブル情報を表示
        cursor.execute("""
            SELECT table_name, column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name IN ('users', 'user_operations')
            ORDER BY table_name, ordinal_position;
        """)
        
        results = cursor.fetchall()
        
        print("\n📋 作成されたテーブル構造:")
        current_table = ""
        for row in results:
            table_name, column_name, data_type, is_nullable = row
            if table_name != current_table:
                print(f"\n📄 {table_name} テーブル:")
                current_table = table_name
            nullable = "NULL可" if is_nullable == "YES" else "NOT NULL"
            print(f"  - {column_name}: {data_type} ({nullable})")
        
        return True
        
    except psycopg2.Error as e:
        print(f"❌ データベースエラー: {e}")
        return False
    except Exception as e:
        print(f"❌ 予期しないエラー: {e}")
        return False
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()
        print("\n🔌 データベース接続を閉じました")

def verify_tables():
    """
    作成されたテーブルを確認する
    """
    print("\n🔍 テーブル作成の確認を行います...")
    
    # 同じ接続処理（簡略化）
    supabase_url = os.getenv("SUPABASE_URL")
    db_password = os.getenv("SUPABASE_DB_PASSWORD")
    host = supabase_url.replace("https://", "").replace("http://", "")
    
    try:
        conn = psycopg2.connect(
            host=host,
            database="postgres", 
            user="postgres",
            password=db_password,
            port="5432"
        )
        cursor = conn.cursor()
        
        # テーブル存在確認
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('users', 'user_operations');
        """)
        
        existing_tables = [row[0] for row in cursor.fetchall()]
        
        print(f"✅ 存在するテーブル: {existing_tables}")
        
        if len(existing_tables) == 2:
            print("🎯 全てのテーブルが正常に存在しています！")
        else:
            print("⚠️  一部のテーブルが見つかりません")
            
    except Exception as e:
        print(f"❌ 確認エラー: {e}")
    finally:
        if 'cursor' in locals():
            cursor.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    print("🚀 Supabase テーブル作成スクリプトを開始します")
    print("=" * 50)
    
    success = create_tables()
    
    if success:
        verify_tables()
        print("\n✨ テーブル作成が完了しました！")
        print("   これでアプリケーションからテーブルを使用できます。")
    else:
        print("\n❌ テーブル作成に失敗しました。")
        print("   .envファイルの設定を確認してください。")