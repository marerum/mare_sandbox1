-- 完全Auth UID統一版 データベース更新SQL
-- user_idをSupabase AuthenticationのUIDと完全に統一

-- ⚠️ 重要: このスクリプト実行前に必ずデータをバックアップしてください

-- 1. 一時的にRLSを無効化
ALTER TABLE users DISABLE ROW LEVEL SECURITY;
ALTER TABLE user_operations DISABLE ROW LEVEL SECURITY;

-- 2. 既存データのバックアップ
CREATE TABLE users_backup_full AS SELECT * FROM users;
CREATE TABLE user_operations_backup_full AS SELECT * FROM user_operations;

-- 3. 外部キー制約を削除
ALTER TABLE user_operations DROP CONSTRAINT IF EXISTS user_operations_user_id_fkey;

-- 4. 新しいテーブル構造を作成（完全統一版）
DROP TABLE IF EXISTS users_new_full;
CREATE TABLE users_new_full (
    user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,  -- Auth UIDをそのまま使用
    mail_address TEXT UNIQUE NOT NULL,
    user_name TEXT,
    location TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- user_operationsテーブルも同様に更新
DROP TABLE IF EXISTS user_operations_new_full;
CREATE TABLE user_operations_new_full (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID REFERENCES users_new_full(user_id) ON DELETE CASCADE,  -- Auth UIDを直接参照
    code_number TEXT,
    item_name TEXT,
    character_img_url TEXT,
    character_name TEXT,
    character_parameter JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. インデックス作成
CREATE INDEX IF NOT EXISTS idx_users_new_full_mail ON users_new_full(mail_address);
CREATE INDEX IF NOT EXISTS idx_operations_new_full_user_id ON user_operations_new_full(user_id);
CREATE INDEX IF NOT EXISTS idx_operations_new_full_code ON user_operations_new_full(code_number);
CREATE INDEX IF NOT EXISTS idx_operations_new_full_created_at ON user_operations_new_full(created_at);

-- 6. 既存テーブルを置き換え
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS user_operations CASCADE;

ALTER TABLE users_new_full RENAME TO users;
ALTER TABLE user_operations_new_full RENAME TO user_operations;

-- 7. RLSポリシー設定（シンプル版）
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_operations ENABLE ROW LEVEL SECURITY;

-- ユーザーは自分のデータのみアクセス可能（シンプル）
CREATE POLICY "Users can manage own profile" ON users
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own operations" ON user_operations
    FOR ALL USING (auth.uid() = user_id);

-- 8. 確認クエリ
SELECT 
    'Fully unified users table structure:' as info,
    column_name, 
    data_type, 
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'users' AND table_schema = 'public'
ORDER BY ordinal_position;

-- 9. バックアップ確認
SELECT 
    'Backup created:' as info,
    COUNT(*) as users_backup_count 
FROM users_backup_full;

SELECT 
    'Backup created:' as info,
    COUNT(*) as operations_backup_count 
FROM user_operations_backup_full;