-- usersテーブルとuser_operationsテーブルのuser_idを
-- Supabase AuthenticationのUIDと統一する移行SQL

-- ⚠️ 注意: このスクリプトを実行する前に必ずデータをバックアップしてください

-- 1. 一時的にRLSを無効化
ALTER TABLE users DISABLE ROW LEVEL SECURITY;
ALTER TABLE user_operations DISABLE ROW LEVEL SECURITY;

-- 2. 既存データのバックアップテーブル作成
CREATE TABLE users_backup AS SELECT * FROM users;
CREATE TABLE user_operations_backup AS SELECT * FROM user_operations;

-- 3. 外部キー制約を一時的に削除
ALTER TABLE user_operations DROP CONSTRAINT IF EXISTS user_operations_user_id_fkey;

-- 4. 新しいテーブル構造を作成
-- usersテーブルを再作成（user_idをauth.usersのidと統一）
DROP TABLE IF EXISTS users_new;
CREATE TABLE users_new (
    user_id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    mail_address TEXT UNIQUE NOT NULL,
    user_name TEXT,
    location TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- user_operationsテーブルを再作成
DROP TABLE IF EXISTS user_operations_new;
CREATE TABLE user_operations_new (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID REFERENCES users_new(user_id) ON DELETE CASCADE,
    code_number TEXT,
    item_name TEXT,
    character_img_url TEXT,
    character_name TEXT,
    character_parameter JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. インデックス作成
CREATE INDEX IF NOT EXISTS idx_users_new_mail ON users_new(mail_address);
CREATE INDEX IF NOT EXISTS idx_operations_new_user_id ON user_operations_new(user_id);
CREATE INDEX IF NOT EXISTS idx_operations_new_code ON user_operations_new(code_number);
CREATE INDEX IF NOT EXISTS idx_operations_new_created_at ON user_operations_new(created_at);

-- 6. 既存データの移行
-- 注意: この段階では手動で適切なauth UIDを指定する必要があります
-- 例：
-- INSERT INTO users_new (user_id, mail_address, user_name, location, created_at)
-- VALUES 
-- ('auth_uid_1', 'tanaka@example.com', '田中太郎', '東京都', NOW()),
-- ('auth_uid_2', 'sato@example.com', '佐藤花子', '大阪府', NOW());

-- 7. テーブル名を入れ替え
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS user_operations CASCADE;

ALTER TABLE users_new RENAME TO users;
ALTER TABLE user_operations_new RENAME TO user_operations;

-- 8. RLSを再有効化
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_operations ENABLE ROW LEVEL SECURITY;

-- 9. RLSポリシーを設定
-- ユーザーは自分のプロフィールのみアクセス可能
CREATE POLICY "Users can view own profile" ON users
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update own profile" ON users  
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own profile" ON users
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- ユーザーは自分の操作ログのみアクセス可能
CREATE POLICY "Users can view own operations" ON user_operations
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own operations" ON user_operations
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own operations" ON user_operations
    FOR UPDATE USING (auth.uid() = user_id);

-- 10. 確認クエリ
SELECT 'users' as table_name, column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'users' AND table_schema = 'public'
UNION ALL
SELECT 'user_operations' as table_name, column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'user_operations' AND table_schema = 'public'
ORDER BY table_name, ordinal_position;

-- バックアップテーブルの存在確認
SELECT 'Backup tables created:' as info;
SELECT COUNT(*) as users_backup_count FROM users_backup;
SELECT COUNT(*) as operations_backup_count FROM user_operations_backup;